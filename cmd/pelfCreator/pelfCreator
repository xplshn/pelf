#!/bin/sh

unset ARGV0 ARGS LD_PRELOAD LD_LIBRARY_PATH
[ "$DEBUG" = "1" ] && set -x

print_help() {
	cat <<EOF
Usage: $(basename "$0") [|-m|-n|-p|-e|-z|-x|-s|-k|-r|-o|--local|--custom-runtime|] <|-v|-h|>

Options:
   -m, --maintainer   Set the maintainer (required)
   -n, --name         Set the name of the app (required)
   -p, --pkg-add      Packages to add with APK (required)
   -e, --entrypoint   Set the entrypoint (required unless using --multicall)
   -z, --dontpack     Disables .dwfs.AppBundle packaging, thus leaving only the AppDir
   -x, --sharun       Processes the desired binaries with lib4bin and adds sharun. Then, it ditches the rootfs and only keeps the files specified with '-k'
   -s, --sandbox      Enable sandbox mode (uses AppRun.rootfs-based)
   -k, --keep         Only keeps the given files from the AppDir/proto (rootfs)
   -r, --getrid       Removes only the given from the AppDir/proto (rootfs)
   -j, --pelf-edition It should be set to the name of the pelf-* edition you want to use, by default, it is "dwfs", it can be set to sqfs if you have pelf-sqfs installed
   -o, --output-to    Set the output file name (optional, default: <name>-<date>.dwfs.AppBundle)
   --local            A directory from which to pick up files such as 'AppRun.sharun', 'rootfs.tgz', 'pelf-$APPBUNDLE_FS', 'bwrap', etc
   --custom-runtime   Same as pelf-*fs' option, it must point to a valid executable file that will be used as runtime for the generated AppBundle
   -h, --help         Display this help and exit

ENV:
     \$LOCAL_PATH      Same as the '--local' flag. Must point to a valid directory
Examples:
   # With .desktop file (enables integration with pelfd)
     $0 --maintainer animecowgirl79 --name mousepad --pkg-add mousepad --entrypoint org.xfce.mousepad.desktop
   # With binary name (disables integration with pelfd unless you manually add a .DirIcon or .desktop or both)
     $0 --maintainer animecowgirl79 --name mousepad --pkg-add mousepad --entrypoint mousepad
   # Using a custom rootfs, AppRuns, etc
     $0 --maintainer animecowgirl79 --name mousepad --pkg-add mousepad --local ./localArchLinuxResources
Notes:
     - [pelfCreator](https://github.com/xplshn/pelf/blob/pelf-ng/pelfCreator) is an experimental tool, part of the pelf project & ecosystem
     - Learn more about [pelf](https://github.com/xplshn/pelf)
EOF
}

parse_arguments() {
	ARGS=$(getopt -o m:n:p:e:x:k:r:j:o:sz -l maintainer:,name:,pkg-add:,entrypoint:,sharun:,keep:,getrid:,pelf-edition:,output:,local:,custom-runtime:,sandbox,dontpack,help -- "$@") || {
		echo "Failed to parse arguments." >&2
		exit 1
	}

	eval set -- "$ARGS"

	while true; do
		case "$1" in
		-m | --maintainer)
			MAINTAINER="$2"
			shift 2
			;;
		-n | --name)
			NAME="$2"
			shift 2
			;;
		-p | --pkg-add)
			PKG_ADD="$2"
			shift 2
			;;
		-e | --entrypoint)
			ENTRYPOINT="$2"
			shift 2
			;;
		-z | --dontpack)
			DONTPACK=1
			shift
			;;
		-x | --sharun)
			SHARUN=1
			LIB4BIN_ARGS="$2"
			shift 2
			;;
		-s | --sandbox)
			SANDBOX="1"
			shift
			;;
		-k | --keep)
			TOBEKEPT_FILES="$2"
			shift 2
			;;
		-r | --getrid)
			GETRID_FILES="$2"
			shift 2
			;;
		-j | --pelf-edition)
		    APPBUNDLE_FS="$2"
		    shift 2
		    ;;
		-o | --output-to)
			OUTPUT_TO="$2"
			shift 2
			;;
		--local)
			LOCAL_PATH="$2"
			shift 2
			;;
		--custom-runtime)
			export _VAR_CUSTOM_RUNTIME="$2"
			shift 2
			if [ ! -f "$_VAR_CUSTOM_RUNTIME" ]; then
			    echo "Error: --custom-runtime: invalid runtime, not a file" >&2
			    exit 1
			fi
			;;
		-h | --help)
			print_help
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			echo "Unexpected option: $1"
			print_help
			exit 1
			;;
		esac
	done
}

check_required_arguments() {
	if [ -z "$MAINTAINER" ] || [ -z "$NAME" ] || [ -z "$PKG_ADD" ]; then
		echo "Error: --maintainer, --name, and --pkg-add are required." >&2
		print_help
		exit 1
	fi

	if [ -z "$ENTRYPOINT" ]; then
		echo "Warning: The resulting AppBundle won't have a default entrypoint/fallback, because you did not specify -e/--entrypoint. It will only work as a multicall binary" >&2
	fi
}

setup_local_path() {
	if [ -n "$LOCAL_PATH" ]; then
		if [ -d "$LOCAL_PATH" ]; then
			export PATH="$LOCAL_PATH:$PATH"
		else
			echo "Error: --local path must be a directory." >&2
			exit 1
		fi
	fi
}

create_appdir() {
	DATE="$(date +%d_%m_%Y)"
	APPBUNDLE_ID="$NAME-$DATE-$MAINTAINER"
	APPDIR="$NAME-$DATE.AppDir"
	OUTPUT_TO="${OUTPUT_TO:-$NAME-$DATE.$APPBUNDLE_FS.AppBundle}"

	mkdir -p "$APPDIR/usr/bin" "$APPDIR/proto"
	echo "${0##*/} $ARGS" >"$APPDIR/.genSteps" && chmod +x "$APPDIR/.genSteps"
}

download_and_extract_rootfs() {
	# Either download & extract rootfs or directly extract it from its local copy
	if [ -f "$LOCAL_PATH/rootfs.tgz" ]; then
		if ! tar xzf "$LOCAL_PATH/rootfs.tgz" -C "$APPDIR/proto" --no-same-permissions; then
			echo "Failed to extract local rootfs"
			exit 1
		fi
	else
        : "${ROOTFS_URL:="$(wget -qO- "https://github.com/pkgforge-dev/pelf/releases/latest/download/alpineLinuxEdge."$(uname -m)".rootfsURL")"}"
		if ! wget -qO- "$ROOTFS_URL" | tar xzf - -C "$APPDIR/proto" --no-same-permissions; then
			echo "Failed to download or extract rootfs"
			exit 1
		fi
	fi
	putDep "bwrap" "$APPDIR/usr/bin/bwrap" "DBIN" "bwrap#github.com.containers.bubblewrap"
}

putDep() {
    INPUT="$1"
    MODE="$3"

    BINPUT="$(basename "$INPUT")"
    OUTPUT="${2:-$APPDIR/usr/bin/$BINPUT}"
    oPATH="$PATH"
    PATH="$LOCAL_PATH:$PATH"

    if echo "$INPUT" | grep -q '^http'; then
        if command -v wget >/dev/null 2>&1; then
            wget -qO "$OUTPUT" "$INPUT"
        elif command -v curl >/dev/null 2>&1; then
            curl -sL -o "$OUTPUT" "$INPUT"
        else
            echo "ERR: Neither wget nor curl is available to download $INPUT"
            exit 1
        fi
    elif BINARY="$(command -v "$INPUT" 2>/dev/null)"; then
        if ldd "$BINARY" | grep -qv "libc"; then
            cp "$BINARY" "$OUTPUT"
        else
            if [ "$MODE" = "DBIN" ]; then
                if [ "$4" = "" ]; then
                    DBIN_INSTALL_DIR="$(dirname "$OUTPUT")" dbin add "$INPUT"
                fi
            else
                echo "ERR: The binary $INPUT is not statically linked and DBIN mode is not specified"
                exit 1
            fi
        fi
    else
        echo "ERR: $INPUT not found in PATH nor LOCAL_PATH"
        exit 1
    fi

    chmod +x "$OUTPUT"
    PATH="$oPATH"
}

pkg_add() {
	putDep "https://raw.githubusercontent.com/xplshn/pelf/refs/heads/dev/assets/AppRun.rootfs-based" "$APPDIR/AppRun"

	_command="--Xbwrap --uid 0 --gid 0 -- apk -X \"https://dl-cdn.alpinelinux.org/alpine/edge/main\" -X \"https://dl-cdn.alpinelinux.org/alpine/edge/community\" -X \"https://dl-cdn.alpinelinux.org/alpine/edge/testing\" -U --allow-untrusted --no-cache --no-interactive add \"$PKG_ADD\""

	if [ -f "$LOCAL_PATH/pkgadd.sh" ]; then
	    _command="!disabled"
		HOME="$HOME" PWD="$PWD" PATH="$PATH" "$APPDIR/AppRun" --Xbwrap --uid 0 --gid 0 -- sh "$LOCAL_PATH/pkgadd.sh" "$PKG_ADD" || return $?
	fi

	if [ -f "$LOCAL_PATH/pkgadd" ]; then
		_command="$(cat "$LOCAL_PATH/pkgadd")"
	fi

	echo "sh" >"$APPDIR/entrypoint"
	[ "$_command" != "!disabled" ]  && eval env -i HOME="$HOME" PWD="$PWD" PATH="$PATH" "$APPDIR/AppRun" "$_command"

	[ "$SANDBOX" = "1" ] && {
		echo "/usr/local/bin/LAUNCH" >"$APPDIR/proto/usr/local/bin/default"
		mkdir -p "$APPDIR/proto/usr/local/bin"
		putDep "https://raw.githubusercontent.com/xplshn/pelf/refs/heads/pelf-ng/assets/LAUNCH-multicall.rootfs.entrypoint" "$APPDIR/proto/usr/local/bin/LAUNCH"
		chmod +x "$APPDIR/proto/usr/local/bin/default"
	}
}

create_entrypoint() {
    echo "$ENTRYPOINT" > "$APPDIR/entrypoint" || {
        echo "Failed to create entrypoint file at \"$APPDIR/entrypoint\""
        exit 1
    }

    chmod +x "$APPDIR/entrypoint" || {
        echo "Failed to make entrypoint executable"
        exit 1
    }
}

handle_desktop_file() {
    if [ "${ENTRYPOINT##*.}" = "desktop" ]; then
        if [ -f "$APPDIR/proto/usr/share/applications/$ENTRYPOINT" ]; then
            ln -f "$APPDIR/proto/usr/share/applications/$ENTRYPOINT" "$APPDIR/$ENTRYPOINT" || {
                echo "Failed to link $APPDIR/proto/usr/share/applications/$ENTRYPOINT"
                exit 1
            }

            ICON_NAME="$(awk -F"=" '/Icon/ {print $2; exit}' "$APPDIR/$ENTRYPOINT" 2>/dev/null)"
            # Modified awk command to better handle Exec= entries
            ENTRYPOINT="$(awk -F"=" '/^Exec=/ {sub("^Exec=", ""); print $1; exit}' "$APPDIR/$ENTRYPOINT" 2>/dev/null)"

            if [ -z "$ENTRYPOINT" ]; then
                echo "Failed to extract Exec entry from desktop file"
                exit 1
            fi

            create_entrypoint

            if [ -n "$ICON_NAME" ]; then
                # Exclude resolutions below 128x128 and select PNG files only
                ICON_PATH=$(find "$APPDIR/proto/usr/share/icons" -type f -name "$ICON_NAME*.png" 2>/dev/null \
                    | grep -v '/\(16x16\|24x24\|32x32\|48x48\|64x64\|96x96\)/' \
                    | sort -n | head -n 1)

                if [ -n "$ICON_PATH" ]; then
                    ln -f "$ICON_PATH" "$APPDIR/.DirIcon" || {
                        echo "Failed to copy icon $ICON_PATH"
                        exit 1
                    }
                else
                    echo "Icon $ICON_NAME not found in $APPDIR/proto/usr/share/icons/"
                fi

                # Also copy an SVG version if available
                SVG_ICON_PATH=$(find "$APPDIR/proto/usr/share/icons" -type f -name "$ICON_NAME*.svg" 2>/dev/null | head -n 1)
                if [ -n "$SVG_ICON_PATH" ]; then
                    cp "$SVG_ICON_PATH" "$APPDIR/.DirIcon.svg" || {
                        echo "Failed to copy SVG icon $SVG_ICON_PATH"
                        exit 1
                    }
                fi
            else
                echo "No Icon entry found in $APPDIR/proto/usr/share/applications/$ENTRYPOINT"
            fi
        else
            echo "No such desktop file: $APPDIR/proto/usr/share/applications/$ENTRYPOINT"
            exit 1
        fi
    fi
}

select_structure_and_apprun() {
    putDep "https://github.com/VHSgunzo/sharun/releases/latest/download/sharun-$(uname -m)-aio" "$APPDIR/sharun"
	if [ "$SHARUN" = "1" ]; then
		# Prepare the list of binaries to be kept
		TOBEKEPT_BIN=""
		for ITEM in $LIB4BIN_ARGS; do
			KEEP=true
			for EXCLUDED in $GETRID_FILES; do
				if [ "$ITEM" = "$EXCLUDED" ]; then
					KEEP=false
					break
				fi
			done
			if $KEEP; then
				TOBEKEPT_BIN="$TOBEKEPT_BIN $APPDIR/proto/$ITEM"
			fi
		done

		# shellcheck disable=SC2086 # Generate and execute lib4bin script
		printf 'LD_LIBRARY_PATH="%s/proto/lib:%s/proto/usr/lib" "%s/sharun" lib4bin --dst-dir "%s"' "$APPDIR" "$APPDIR" "$APPDIR" "$APPDIR" >"$APPDIR/.genl4b"
		echo "$TOBEKEPT_BIN" >>"$APPDIR/.genl4b"
		chmod +x "$APPDIR/.genl4b"

		if "$APPDIR/.genl4b"; then
			putDep "https://raw.githubusercontent.com/xplshn/pelf/refs/heads/pelf-ng/assets/AppRun.sharun" "$APPDIR/AppRun"
			chmod +x "$APPDIR/AppRun"
			"$APPDIR/sharun" -g
			[ -z "$TOBEKEPT_FILES" ] && rm -rf "$APPDIR/proto" # SHARUN mode without Proto mode
		fi
        rm "$APPDIR/sharun"
		putDep "https://github.com/VHSgunzo/sharun/releases/latest/download/sharun-$(uname -m)" "$APPDIR/sharun"
	fi

	if [ -n "$TOBEKEPT_FILES" ]; then
        # We're in EXPLICIT "proto" mode/norootfs. Let's only keep the specified files.
		for ITEM in $TOBEKEPT_FILES; do # Doesn't do anything if the var is empty
			KEEP=true
			for EXCLUDED in $GETRID_FILES; do
				if [ "$ITEM" = "$EXCLUDED" ]; then
					KEEP=false
					break
				fi
			done
			if $KEEP; then
				mkdir -p "$APPDIR/proto_trimmed/$(dirname "$ITEM")"
				cp -r "$APPDIR/proto/$ITEM" "$APPDIR/proto_trimmed/$ITEM"
			fi
		done
		rm -rf "$APPDIR/proto"
	fi
    # Finalized AppDir/proto or AppDir/proto_trimmed
	putDep "unionfs" "$APPDIR/usr/bin/unionfs" "DBIN" "unionfs-fuse3/unionfs"
	putDep "https://raw.githubusercontent.com/xplshn/pelf/refs/heads/pelf-ng/assets/AppRun.sharun.ovfsProto" "$APPDIR/AppRun"
	chmod +x "$APPDIR/AppRun"
}

tidyup() {
	for EXCLUDED in $GETRID_FILES; do
		if [ -f "$APPDIR/proto/$EXCLUDED" ] || [ -d "$APPDIR/proto/$EXCLUDED" ]; then
		    rm -rf "${APPDIR:?}/proto/$EXCLUDED"
		fi
	done
	[ -d "$APPDIR/proto" ] && mkdir -p "$APPDIR/proto/app" "$APPDIR/proto/host" && {
	    rm -rf "$APPDIR/proto/etc/machine-id"  "$APPDIR/proto/etc/machine-id" \
	           "$APPDIR/proto/etc/resolv.conf" "$APPDIR/proto/etc/passwd"     \
	           "$APPDIR/proto/etc/group"       "$APPDIR/proto/etc/hosts"      \
	           "$APPDIR/proto/etc/hostname"    "$APPDIR/proto/etc/localtime"  \
	           "$APPDIR/proto/__w"             "$APPDIR/proto/github"
	   [ "$SANDBOX" = "1" ] && {
            touch    "$APPDIR/proto/etc/machine-id"       \
	                 "$APPDIR/proto/etc/hostname"         \
	                 "$APPDIR/proto/etc/localtime"        \
	                 "$APPDIR/proto/etc/passwd"           \
	                 "$APPDIR/proto/etc/groups"           \
	                 "$APPDIR/proto/etc/hosts"            \
	                 "$APPDIR/proto/etc/nsswitch.conf"    \
	                 "$APPDIR/proto/etc/resolv.conf"      \
	                 "$APPDIR/proto/etc/asound.conf"

	        mkdir -p "$APPDIR/proto/usr/share/fonts"      \
	        		 "$APPDIR/proto/usr/share/fontconfig"
        }
    }
}

upx_static_tools() {
	if command -v "upx" >/dev/null 2>&1; then
		for file in "$APPDIR/usr/bin"/*; do
			upx "$file"
		done
	fi
}

create_bundle() {
	printf 'pelf-%s --add-appdir "%s" --appbundle-id "%s" --output-to "%s" --embed-static-tools\n' "$APPBUNDLE_FS" "$APPDIR" "$APPBUNDLE_ID" "$OUTPUT_TO" >"$APPDIR/.gen"
	chmod +x "$APPDIR/.gen"
	if [ "$DONTPACK" != "1" ]; then
		if [ -f "$LOCAL_PATH/pelf-$APPBUNDLE_FS" ]; then
			"$LOCAL_PATH/pelf-$APPBUNDLE_FS" --add-appdir "$APPDIR" --appbundle-id "$APPBUNDLE_ID" --output-to "$OUTPUT_TO" --embed-static-tools
		elif command -v "pelf-$APPBUNDLE_FS" >/dev/null 2>&1; then
		    "$APPDIR/.gen"
		else
			if ! wget -qO- "https://raw.githubusercontent.com/xplshn/pelf/refs/heads/pelf-ng/pelf-$APPBUNDLE_FS" | sh -s -- --add-appdir "$APPDIR" --appbundle-id "$APPBUNDLE_ID" --output-to "$OUTPUT_TO" --embed-static-tools; then
				echo "Final packaging failed"
				exit 1
			fi
		fi
	fi
}

require() {
    # shellcheck disable=SC2068 # We need to split $@
    for cmd in $@; do
        command -v "$cmd" >/dev/null 2>&1 || echo "Error: missing a required dependency: [$cmd] ; Make sure you have the following dependencies in your \$PATH before continuing: [$*]" >&2
    done
}

main() {
        APPBUNDLE_FS="${APPBUNDLE_FS:-dwfs}"
        require "wget"
	parse_arguments "$@"
	check_required_arguments
	setup_local_path
	create_appdir
	download_and_extract_rootfs
	pkg_add
	# Actual logic 0------------------------------------->
	create_entrypoint                                    # 1.
	handle_desktop_file                                  # 2.
	[ "$SANDBOX" != "1" ] && select_structure_and_apprun # 3.
	tidyup                                               # 4.
	upx_static_tools                                     # 5.
	create_bundle                                        # 6.
}

main "$@"
