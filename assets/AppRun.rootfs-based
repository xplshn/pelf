#!/bin/sh

# DATE OF LAST REVISION: 28-07-2025

# shellcheck disable=SC2086
[ -n "$DEBUG" ] && set -$DEBUG

# Let people use an external AppRun
[ "$EXT_APPRUN" = "1" ] || {
    # Determine the path to the AppRun itself
    SELF="$(readlink -f "$0")"
    APPDIR="${SELF%/*}"
}

[ -d "$APPDIR/rootfs" ] && BWROOTFS="$APPDIR/rootfs"
[ -d "$APPDIR/proto" ] && BWROOTFS="$APPDIR/proto"

# Find bwrap
BWRAP_BIN="${APPDIR}/usr/bin/bwrap"
[ ! -f "$BWRAP_BIN" ] && echo "bwrap not at $BWRAP_BIN"

# Default ARGV0
[ -z "$ARGV0" ] && ARGV0="${0##*/}"

# Forces the use of things contained within the rootfs
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

bool() {
    case "$1" in
        false | 0) echo "0" ;;
        true | 1) echo "1" ;;
        *) echo "Invalid boolean value: $1" >&2; exit 1 ;;
    esac
}

# Function to check if a feature is enabled by file presence
is_enabled() {
    _propName="$1"
    [ -f "$APPDIR/.enabled/$_propName" ] && echo "1" && return 0
    [ -f "$APPDIR/.disabled/$_propName" ] && echo "0" && return 0
    echo "$2" ; return 5
}

# Defaults with file-based overrides
SHARE_LOOK="$(is_enabled "SHARE_LOOK" 1)"
SHARE_FONTS="$(is_enabled "SHARE_FONTS" 1)"
SHARE_AUDIO="$(is_enabled "SHARE_AUDIO" 1)"
SHARE_XDG_RUNTIME_DIR="$(is_enabled "SHARE_XDG_RUNTIME_DIR" 1)"
SHARE_OPT="$(is_enabled "SHARE_OPT" 1)"
UID0_GID0="$(is_enabled "UID0_GID0" 0)"

_sh_cat() {
    while IFS= read -r line; do
        echo "$line"
    done < "$1"
}
# Set default cmd
SELF_ARGS="-- $(_sh_cat "$APPDIR/entrypoint")"

# Parse other arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        --Xbwrap)
            shift
            SELF_ARGS="$*"
            SHARE_XDG_RUNTIME_DIR=0
            SHARE_AUDIO=0
            SHARE_LOOK=0
            SHARE_FONTS=0
            SHARE_OPT=0
            break
            ;;
        --Xbwrap-XdgRuntimeDir)
            SHARE_XDG_RUNTIME_DIR=$(bool "$2") # Shares the entire XDG_RUNTIME_DIR
            shift
            ;;
        --Xbwrap-audio)
            SHARE_AUDIO=$(bool "$2") # Shares the audio sockets that pipewire and pulseaudio need. As well as the Alsa config at /etc
            shift
            ;;
        --Xbwrap-look)
            SHARE_LOOK=$(bool "$2") # Shares the icons & themes directories with the rootfs
            shift
            ;;
        --Xbwrap-opt)
           SHARE_OPT=$(bool "$2") # Binds /opt
           shift
           ;;
        --Xbwrap-hostFonts)
            SHARE_FONTS=$(bool "$2") # Shares the host's fonts
            shift
            ;;
        --Xbwrap-uid0gid0)
            UID0_GID0=$(bool "$2") # Enables --uid 0 and --gid 0, effectively tricking the program within the rootfs into thinking that you have superuser rights
            shift
            ;;
        *)
            SELF_ARGS="$SELF_ARGS $1"
            ;;
    esac
    shift
done

# Check for existing entrypoint execution
if [ "$WITHIN_BWRAP" = 1 ] && [ -f "/entrypoint" ]; then
    exec "/entrypoint"
fi

# Function to build bwrap options
build_bwrap_options() {
    #BWRAP_OPTIONS="\
    #    --dev-bind    /                   /                 \
    #    --ro-bind-try $BWROOTFS/usr/lib   /usr/lib          \
    #    --ro-bind-try $BWROOTFS/usr/lib64 /usr/lib64        \
    #    --ro-bind-try $BWROOTFS/usr/lib32 /usr/lib32        \
    #    --ro-bind-try $BWROOTFS/lib       /lib              \
    #    --ro-bind-try $BWROOTFS/lib64     /lib64            \
    #    --ro-bind-try $BWROOTFS/lib32     /lib32            \
    #    --ro-bind-try $BWROOTFS/usr/bin   /usr/bin          \
    #    --ro-bind-try $BWROOTFS/usr/sbin  /usr/sbin         \
    #    --ro-bind-try $BWROOTFS/bin       /bin              \
    #    --ro-bind-try $BWROOTFS/sbin      /sbin             \
    #    --ro-bind-try $BWROOTFS/etc       /etc              \
    #    --setenv      BWROOTFS           \"$BWROOTFS\"      \
    #    --setenv      ARGV0              \"$ARGV0\"         \
    #    --setenv      ARGS               \"$SELF_ARGS\"     \
    #    --setenv      WITHIN_BWRAP       \"1\"              \
    #    --cap-add 	   CAP_NET_BIND_SERVICE                 \
    #    --cap-add     CAP_SYS_ADMIN"

    BWRAP_OPTIONS="--bind $BWROOTFS / 							 \
        --share-net 											 \
        --dev-bind		/dev                 /dev				 \
        --ro-bind-try	/run                 /run				 \
        --ro-bind-try	/sys                 /sys				 \
        --ro-bind-try	/media               /media			 	 \
        --ro-bind-try	/mnt                 /mnt 				 \
        --ro-bind-try	/etc/localtime       /etc/localtime 	 \
        --ro-bind-try	/etc/machine-id      /etc/machine-id 	 \
        --ro-bind-try	/etc/resolv.conf     /etc/resolv.conf 	 \
        --ro-bind-try	/lib/firmware        /lib/firmware 		 \
        --ro-bind-try	/etc/passwd          /etc/passwd 		 \
        --ro-bind-try	/etc/groups          /etc/groups		 \
        --ro-bind-try	/etc/hosts           /etc/hosts 		 \
        --ro-bind-try	/etc/nsswitch.conf   /etc/nsswitch.conf	 \
        --ro-bind-try	/etc/hostname        /etc/hostname 		 \
        --bind-try	    \"$APPDIR\"          /app 				 \
        --bind-try	    \"${TMPDIR:-/tmp}\"  \"${TMPDIR:-/tmp}\" \
        --bind-try	    $HOME                $HOME				 \
        --setenv		SELF                 \"$SELF\" 			 \
        --setenv		APPDIR               \"$APPDIR\" 	     \
        --setenv		BWROOTFS             \"$BWROOTFS\" 		 \
        --setenv		ARGV0                \"$ARGV0\" 		 \
        --setenv		ARGS                 \"$SELF_ARGS\" 	 \
        --setenv		WITHIN_BWRAP         \"1\" 				 \
        --proc			/proc 									 \
        --cap-add 		CAP_NET_BIND_SERVICE                     \
        --cap-add 		CAP_SYS_ADMIN"
    # Conditionally add optional directories

    # Arch is a BS os, and programs get installed to /opt
    if [ "$SHARE_OPT" = 1 ]; then
        [ -d /opt ] && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /opt /opt"
    fi

    # Themes & Icons
    if [ "$SHARE_LOOK" = "1" ]; then
        [ -d /usr/share/icons ]  && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /usr/share/icons /usr/share/icons"
        [ -d /usr/share/themes ] && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /usr/share/themes /usr/share/themes"
    fi

    # Fonts
    if [ "$SHARE_FONTS" = 1 ]; then
        [ -d /usr/share/fontconfig ] && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /usr/share/fontconfig /usr/share/fontconfig"
        [ -d /usr/share/fonts ]      && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /usr/share/fonts /usr/share/fonts"
    fi

    fUID="$(id -u)"
    [ -z "$XDG_RUNTIME_DIR" ] && [ -d "/run/user/$fUID" ] && XDG_RUNTIME_DIR="/run/user/$fUID"

    # Add optional XDG_RUNTIME_DIR binding if enabled
    [ "$SHARE_XDG_RUNTIME_DIR" = "1" ] && [ -n "$XDG_RUNTIME_DIR" ] && BWRAP_OPTIONS="$BWRAP_OPTIONS --bind-try $XDG_RUNTIME_DIR $XDG_RUNTIME_DIR"

    # Add optional audio bindings if enabled
    if [ "$SHARE_AUDIO" = "1" ] && [ -n "$XDG_RUNTIME_DIR" ]; then
        for __E in "/etc/asound.conf" "$XDG_RUNTIME_DIR/pulse" "$XDG_RUNTIME_DIR/pipewire-0" "$XDG_RUNTIME_DIR/pipewire-0.lock" "$XDG_RUNTIME_DIR/pipewire-0-manager" "$XDG_RUNTIME_DIR/pipewire-0-manager.lock"; do
            if [ -f "$__E" ] || [ -d "$__E" ]; then
                if [ -f "$BWROOTFS/$__E" ] || [ -d "$BWROOTFS/$__E" ]; then
                    BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try $__E $__E"
                fi
            fi
        done
    fi

    # We could be running from a GH runner -> See AppBundleHUB & pelfCreator.
    [ -d "/__w" ] && BWRAP_OPTIONS="$BWRAP_OPTIONS --ro-bind-try /__w /__w"

    if [ "$UID0_GID0" = "1" ]; then
        BWRAP_OPTIONS="$BWRAP_OPTIONS --uid 0 --gid 0"
    fi

    printf '%s\n' "$BWRAP_OPTIONS"
}

# Build and execute the bwrap options
BWRAP_OPTIONS="$(build_bwrap_options "$@")"

eval "exec $BWRAP_BIN $BWRAP_OPTIONS $SELF_ARGS"
